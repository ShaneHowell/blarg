/**
 * @file            _mixins.scss
 * @compiles-to     n/a
 * @imports-to      _blarg.scss
 * @author          Shane Howell <@shane_howell>
 * @author          Wes Rice <@wesrice>
 */

/*******************************************************

    ** = obsolete

    Mixins Available:
        -   em                  - arguments: #px
                                    ex: font-size: em(12px);
        -   background-gradient - arguments: #startColor, #endColor
                                    ex: @include background-gradient(#fff, #ff0);
        -   clearfix            - arguments: null
                                    ex: @include clearfix();
        -   absolute position   - arguments: top, right, bottom, left
                                    ex: @include abs-pos(5px, 5px, 5px, 5px);
        -   dashed-border       -arguments: $dashlength, $spacelength, $borderwidth, $color, $position: top
                                    ex: @include dashed-border($dashlength, $spacelength, $borderwidth, $color, $position: top);
        -   vertical-align      -arguments: null
                                    ex: @include vertical-align;
    **  -   box-sizing          - arguments: content-box | border-box | inherit
                                    ex: @include box-sizing(border-box);
    **  -   border-radius       - arguments: #px
                                    ex: @include border-radius(5px);
    **  -   box-shadow          - arguments: x, y, blur, color, inset (defaults to false)
                                    ex: @include box-shadow(2px, 3px, 5px, #ff0);
    **  -   opacity             - arguments: #
                                    ex: @include opacity(0.1);
    **  -   rotate              - arguments: #, m11, m12, m21, m22
                                    M values not required but advised for IE support, calc: http://www.boogdesign.com/examples/transforms/matrix-calculator.html
                                    ex: @include rotate(20, 0.93969262, -0.34202014, 0.34202014, 0.93969262);
    **  -   transform           - arguments: null
                                    ex: @include transform(scale(2, 0.5)); , any transform value can be used
    **  -   transition          - arguments: what, time, easing (ease-in-out = default), delay (default = 0)
                                    ex: @include transition(all, 1s, ease-in-out, 1s);
    **  -   keyframes           - arguments: animationName
                                    ex: @include keyframes(animationName) { @content };
    **  -   animation           - arguments: normal shorthand
                                    ex: @include animation('');
                                        Can chain animations by using comma seperation.
    **  -   columns             -arguments: $count, $gap
                                    ex: @include columns($count, $gap);

********************************************************/



/*****************************************************************************
 ** Working in ems can be annoying. Think in pixels by using this function  **
 ** $font-size is coming from _variables, base font size for all the things **
 ** em(#px)                                                                 **
 **                                                                         **
 **                                                                         **
 ** http://erskinedesign.com/blog/calculating-ems-scss/                     **
 *****************************************************************************/

    @function em($target, $context: $base-font-size) {
        @return ($target / $context) * 1em;
    }



/*****************************************************
 ** Box-sizing, it'll make your life easier.        **
 ** content-box | border-box | inherit              **
 ** @include box-sizing();                          **
 **                                                 **
 **                                                 **
 ** https://github.com/matthieua/sass-css3-mixins   **
 *****************************************************/

    @mixin box-sizing($type: border-box) {
      -webkit-box-sizing: $type;
         -moz-box-sizing: $type;
              box-sizing: $type;
    }



/**********************************
 ** Border-radius                **
 ** @include border-radius(#px); **
 **********************************/

    @mixin border-radius($radius) {
        -webkit-background-clip: padding-box;
           -moz-background-clip: padding-box;
                background-clip: padding-box;
        -webkit-border-radius: $radius;
           -moz-border-radius: $radius;
                border-radius: $radius;
    }



/*****************************************************
 ** Background Gradient                             **
 ** @include background-gradient();                 **
 **                                                 **
 **                                                 **
 ** https://github.com/matthieua/sass-css3-mixins   **
 *****************************************************/

    @mixin background-gradient($startColor, $endColor) {
        background-color: $startColor;
        background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
        background-image: -webkit-linear-gradient(top, $startColor, $endColor);
        background-image:    -moz-linear-gradient(top, $startColor, $endColor);
        background-image:     -ms-linear-gradient(top, $startColor, $endColor);
        background-image:      -o-linear-gradient(top, $startColor, $endColor);
        background-image:         linear-gradient(top, $startColor, $endColor);
        filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr=$startColor, EndColorStr=$endColor);
    }



/***************************************************************
 ** Box Shadow                                                **
 ** @include box-shadow(x, y, blur, color, inset true/false); **
 **                                                           **
 **                                                           **
 ** https://github.com/matthieua/sass-css3-mixins             **
 ***************************************************************/

    @mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: null) {
        -webkit-box-shadow: $inset $x $y $blur $color;
           -moz-box-shadow: $inset $x $y $blur $color;
                box-shadow: $inset $x $y $blur $color;
    }



/*****************************************************
 ** Opacity                                         **
 ** @include opacity();                             **
 **                                                 **
 **                                                 **
 ** https://github.com/matthieua/sass-css3-mixins   **
 *****************************************************/

    @mixin opacity($opacity) {
        -khtml-opacity: $opacity;
          -moz-opacity: $opacity;
               opacity: $opacity;
            -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($opacity * 100) + ")";
                filter: unquote("alpha(opacity=#{$opacity * 100})");
    }



/*****************************************************
 ** Rotate                                          **
 ** @include rotate();                              **
 **                                                 **
 **                                                 **
 ** https://github.com/matthieua/sass-css3-mixins   **
 *****************************************************/

    @mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
        -webkit-transform: rotate($deg + deg);
           -moz-transform: rotate($deg + deg);
            -ms-transform: rotate($deg + deg);
             -o-transform: rotate($deg + deg);
                transform: rotate($deg + deg);
        filter: progid:DXImageTransform.Microsoft.Matrix(
                M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand');
        zoom: 1;
    }



/*****************************************************
 ** Transform                                       **
 ** @include transform(value);                      **
 **                                                 **
 **                                                 **
 ** https://github.com/matthieua/sass-css3-mixins   **
 *****************************************************/

    @mixin transform($value) {
        -webkit-transform: $value;
           -moz-transform: $value;
                transform: $value;
    }



/*****************************************************
 ** Transition                                      **
 ** @include transition(what, time, easing, delay)  **
 **                                                 **
 **                                                 **
 ** https://github.com/matthieua/sass-css3-mixins   **
 *****************************************************/

    @mixin transition($what, $length, $easing: ease-in-out, $delay: 0) {
        -webkit-transition: $what $length $easing $delay;
           -moz-transition: $what $length $easing $delay;
            -ms-transition: $what $length $easing $delay;
             -o-transition: $what $length $easing $delay;
                transition: $what $length $easing $delay;
    }


/*****************************************************************
 ** Clearfix                                                    **
 ** @include clearfix();                                        **
 **                                                             **
 **                                                             **
 ** http://web-design-weekly.com/snippets/sass-clearfix-mixin/  **
 *****************************************************************/

    @mixin clearfix() {
        & {
            *zoom: 1;
        }
        &:before,
        &:after {
            content: "";
            display: table;
        }
        &:after {
            clear: both;
        }
    }



/*****************************************************************
 ** Absolute Position                                           **
 ** @include abs-pos(t, r, b, l);                               **
 **                                                             **
 **                                                             **
 ** http://web-design-weekly.com/2013/05/12/handy-sass-mixins/  **
 *****************************************************************/

    @mixin abs-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
      top: $top;
      right: $right;
      bottom: $bottom;
      left: $left;
      position: absolute;
    }



/*********************************************************************************
 ** Keyframes                                                                   **
 ** @include keyframes();                                                       **
 **                                                                             **
 **                                                                             **
 ** http://joshbroton.com/quick-fix-sass-mixins-for-css-keyframe-animations/    **
 *********************************************************************************/

    @mixin keyframes($animationName) {
        @-webkit-keyframes #{$animationName} {
            @content;
        }
        @-moz-keyframes #{$animationName} {
            @content;
        }
        @-o-keyframes #{$animationName} {
            @content;
        }
        @keyframes #{$animationName} {
            @content;
        }
    }



/*********************************************************************************
 ** Animation                                                                   **
 ** @include animation('');     *allows chaining with , seperation*             **
 **                                                                             **
 **                                                                             **
 ** http://joshbroton.com/quick-fix-sass-mixins-for-css-keyframe-animations/    **
 *********************************************************************************/

    @mixin animation($animate...) {
        $max: length($animate);
        $animations: '';

        @for $i from 1 through $max {
            $animations: #{$animations + nth($animate, $i)};

            @if $i < $max {
                $animations: #{$animations + ", "};
            }
        }
        -webkit-animation: $animations;
        -moz-animation:    $animations;
        -o-animation:      $animations;
        animation:         $animations;
    }



/*********************************************************
 ** CSS3 Columns                                        **
 ** @include columns($count, $gap);                     **
 *********************************************************/

    @mixin columns($count: 3, $gap: 10) {
        -webkit-column-count: $count;
        -moz-column-count:    $count;
        column-count:         $count;

        -webkit-column-gap:   $gap;
        -moz-column-gap:      $gap;
        column-gap:           $gap;
    }


/**************************************************************************************************
 ** CSS3 Dashed Border                                                                           **
 ** @include dashed-border($dashlength, $spacelength, $borderwidth, $color, $position: top);     **
 **                                                                                              **
 ** http://thephuse.com/development/customizing-your-dashed-and-dotted-borders-in-css3/          **
 **************************************************************************************************/

    @mixin dashed-border($dashlength, $spacelength, $borderwidth, $color, $position: top) {
        $per: percentage($dashlength / ($dashlength + $spacelength));
        background-image: linear-gradient(to right, $color 0%, $color $per, rgba(0, 0, 0, 0) $per);
        background-position: 0 $position;
        background-size: ($dashlength + $spacelength) $borderwidth;
        background-repeat: repeat-x;
    }


/*******************************************************************************
 ** Vertical Align                                                            **
 ** @include vertical-align;                                                  **
 **                                                                           **
 ** http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/  **
 *******************************************************************************/

    @mixin vertical-align {
        position: relative;
        top: 50%;
        -webkit-transform: translateY(-50%);
            -ms-transform: translateY(-50%);
                transform: translateY(-50%);
    }




// @mixin rem($property, $values) {
//  // Create a couple of empty lists as output buffers.
//  $font-size: $base-font-size;
//  $px-values: ();
//  $rem-values: ();

//  // Loop through the $values list
//  @each $value in $values {

//      // For each property value, if it's in rem or px, derive both rem and
//      // px values for it and add those to the end of the appropriate buffer.
//      // Ensure all pixel values are rounded to the nearest pixel.
//      @if $value == 0 or $value == 0px {

//          // 0 -- use it without a unit
//          $px-values: join($px-values, 0);
//          $rem-values: join($rem-values, 0);

//      } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {

//          // px value given - calculate rem value from font-size
//          $new-rem-value: $value / $font-size;
//          $px-values: join($px-values, round($value));
//          $rem-values: join($rem-values, #{$new-rem-value}rem);

//      } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {

//          // % value given - don't add px or rem
//          $px-values: join($px-values, #{$value});
//          $rem-values: join($rem-values, #{$value});

//      } @else if $value == auto {

//          // auto - don't add px or rem
//          $px-values: join($px-values, auto);
//          $rem-values: join($rem-values, auto);

//      } @else {

//          // unitless value - use those directly as rem and calculate the px-fallback
//          $px-values: join($px-values, round($value * $font-size));
//          $rem-values: join($rem-values, #{$value}rem);

//      }
//  }

//   // output the converted rules
//   #{$property}: $px-values;
//   #{$property}: $rem-values;
// }
